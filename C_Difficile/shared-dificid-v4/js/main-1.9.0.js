/*
 * MainModule v1.9.0
 * 
 * Main module for iPad Presentations
 * Supported platforms: Veeva iRep and Oracle iSales
 * 
 * Author: Juan Carlos Rojas <Costa Rica>
 * Email: juan.c.rojas.vargas@accenture.com
 * Creation date: April 27, 2013
 * Copyright (c) 2013 Accenture
 * Contributors:
 *      Gautam Bellare      <gautam.bellare@accenture.com>
 *      <new contributor>   <email address>
 * 
 * Please, DO NOT edit this file. We need to keep the same structure
 * and global settings for all the slides. If you have questions or
 * recommendations, please, ask for the documentation or contact me.
 * 
 * By default the target platform is VEEVA. If you are going to work
 * with iSales, please, change the platform from the specific.js file
 * (do not modify main.js) using MainModule.setPlatform('ORACLE');
 * 
 *
 * Shared footer uploaded via js file. Also updated footer code to disable linking for same slide links
 * Last update: July 5, 2017 <gautam.bellare> 
 * 
 * Added debug scripting to check console error alerts on ipad 
 * 
 * Added Swiping functionality for desktop
 * 
 * Last update: 10 october 2018 <swapnil.ghosh>
 *
 * Load navigation through single html file.
 */

var MainModule = (function(window, undefined){
    var debugOn = true, scrollableElementsList = [], targetPlatform = 'VEEVA',
        useTouchEvents = true, ssiScrollableElementsList = [], sessionNamer, sessionKeyName, sessionNameValuer,
        storage, portraitSessionNamer, portraitSessionNameValuer, num = 0, specificLoad = $('body').attr('data-pix');//check if slide is DMCM or not
    
//show debugging messages
    var showDebugMessage = function(messageContent, messageType){
        messageType || (messageType = 'log')    

        if(debugOn) console[messageType](messageContent);
    };

//default settings for avModal
    // var avModalSettings = function(){
    //     if($.fn.avModal){
    //         $('.avModal').avModal({
    //             appendTo: '#contentWrapper',
    //             defaultWidth: '924',
    //             preventDefault: true,
    //             defaultHeight: '601',
    //             debug: debugOn,
    //             overlayOpacity: 1,
    //             theme: 'avModal'
    //         });
    //     }else{
    //         showDebugMessage('avModal plugin does not exist', 'warn');
    //     }
    // };

//detect mobile devices
    var isMobile = function(){
        return (/webOS|iPhone|iPad|iPod|Android|BlackBerry/i.test(navigator.userAgent));
    };

//link between slides/pages
    var linksCustomTag = function(){
        var $links = $('[data-slide]');
        console.log('i m called');
        $links.unbind('click').unbind('touchstart');
        $links.bind('click' + (useTouchEvents === true ? ' touchend' : ''), function(e){
            console.log(useTouchEvents);
            var $this = $(this);

            if(!$this.attr('data-surveyQuestion') && !$this.attr('data-tagDescription')){
                e.preventDefault();
                
                var slideLink = $this.attr('data-slide');
                
                if(slideLink !== ''){
                    MainModule.openSlide(slideLink);
                }else{
                    showDebugMessage('The link is empty', 'warn');
                }
            }
        });
    };



    //lock overscroll
    var lockScroll = function(){
        $('body').on('touchmove', function(e){
            e.preventDefault();
            
            var elementIndex = $.inArray('#' + e.target.id, scrollableElementsList);
            if(elementIndex === -1){
                elementIndex = $.inArray('.' + e.target.className, scrollableElementsList);
            }
            
            if(elementIndex !== -1){
                var $element = $(scrollableElementsList[elementIndex]);
                
                $element.on({
                    touchstart: function(e){
                        // showDebugMessage(e.target.id + ' is scrollable', 'log');
                        // e.stopPropagation();
                        var $this=$(this),scrollHeight=$this.get(0).scrollHeight-
                            (
                                parseInt($this.css('margin-top')) +
                                parseInt($this.css('margin-bottom')) +
                                parseInt($this.css('padding-bottom')) +
                                parseInt($this.css('padding-top'))
                            );
                        
                        if(!(scrollHeight>$this.height())){
                            e.stopPropagation(); e.preventDefault();
                        }else{
                            if(e.currentTarget.scrollTop===0){
                                e.currentTarget.scrollTop=1;
                            }else if(e.currentTarget.scrollHeight===e.currentTarget.scrollTop +
                            e.currentTarget.offsetHeight){
                                e.currentTarget.scrollTop-=1;
                            }
                        }
                    },
                    touchmove: function(e){
                        e.stopPropagation();
                    },
                    touchend: function(e){
                        // $element.off('touchmove');
                        // $element.off('touchend');
                    }
                });
            }
        });
    };

    //Scrolling by passing values
    var touchScroller = function(scrollElement){
        var passScrollElement = scrollElement;
        $(passScrollElement).on({
            touchstart: function(e){
                var $this=$(this),scrollHeight=$this.get(0).scrollHeight-
                    (
                        parseInt($this.css('margin-top')) +
                        parseInt($this.css('margin-bottom')) +
                        parseInt($this.css('padding-bottom')) +
                        parseInt($this.css('padding-top'))
                    );
                
                if(!(scrollHeight>$this.height())){
                    e.stopPropagation(); e.preventDefault();
                }else{
                    if(e.currentTarget.scrollTop===0){
                        e.currentTarget.scrollTop=1;
                    }else if(e.currentTarget.scrollHeight===e.currentTarget.scrollTop +
                    e.currentTarget.offsetHeight){
                        e.currentTarget.scrollTop-=1;
                    }
                }
            },
            touchmove: function(e){
                e.stopPropagation();
            },
            touchend: function(e){
                e.stopPropagation();
            }
        });
    };

    //Load footer as selected in the footer content
    var footerLoad = function(){
        // var loadFoot = '../shared/' + sharedPath + '/footerLinks.html' + '#' + ($('footer').attr('data-count'));
        // $('footer').load(loadFoot);
        $('footer').load('../shared/' + sharedPath + '/footerLinks.html ' + '#' + ($('footer').attr('data-count')));
        var slideName = $('body').attr('data-SlideName');
        $(document).ajaxStop(function() {
            $('footer li[data-SlideName="' + slideName + '"]').attr('data-slide', '');
        });
    };

    // For loading Navigation from navLinks
    var navLoad = function(){
        //$("nav ul").load('../shared/' + sharedPath + '/navLinks.html');
        $('nav').load('../shared/' + sharedPath + '/navLinks.html ' + '#' + ($('nav').attr('data-count')));
        console.log('../shared/' + sharedPath + '/navLinks.html');
        var slideName = $('body').attr('data-SlideName');
        
        $(document).ajaxStop(function() {
            $('nav li[data-SlideName="' + slideName + '"]').attr('data-slide', '').addClass("selected");
        });                                                 
    };
    // for DMCM Slide
    var headLoad = function(){
        var headLoad = (specificLoad) ? '' : $('header').addClass('headDMCM');
    };

    var debugScripting = function(){
        if (debugAlert) {
            window.addEventListener("error", handleError, true);

            function handleError(evt) {
                if (evt.message) { // Chrome sometimes provides this
                  alert("error: "+evt.message +" at linenumber: "+evt.lineno+" of file: "+evt.filename);
                } else {
                  alert("error: "+evt.type+" from element: "+(evt.srcElement || evt.target));
                }
            }
        }
    };


//public methods
    return{
    //initialize script
        init: function(debugIsOn){
            debugOn = (debugIsOn === true || false);
            showDebugMessage('Debug mode is ON', 'log');
            
            targetPlatform.toUpperCase();
            
            showDebugMessage('Initializing script', 'log'); 
            setTimeout(function(){
                linksCustomTag();
            }, 300); 
            lockScroll();
            headLoad();
            footerLoad();
            navLoad();
            debugScripting();
            // avModalSettings();
            // linksPopupTag();
            return this;
        },
    //set scrollable elements
        setScrollableElements: function(elementsList){
            elementsList || (elementsList = []);
            
            scrollableElementsList = elementsList;
            // showDebugMessage('Setting up scrollable elements: ' +
            // scrollableElementsList.join(', '), 'log');
            lockScroll();

            return this;
        },
   //set scrollable elements for touchscroll jquery
       setSSIScrollableElements: function(elementsList){
           elementsList || (elementsList = []);
           
           ssiScrollableElementsList = elementsList;
           for(var i=0; i< ssiScrollableElementsList.length; i++) {
               touchScroller(ssiScrollableElementsList[i]);
           };
           return this;
       }, 
    //debug-mode on
        setDebugOn: function(){
            debugOn = true;
            showDebugMessage('Debug mode is ON', 'log');
            
            return this;
        },
    //debug-mode off
        setDebugOff: function(){
            showDebugMessage('Debug mode is OFF', 'log');
            debugOn = false;
            
            return this;
        },
    //disable selection
        disableSelection: function(elementsList){
            if(!elementsList || !elementsList.length) elementsList = ['body'];
            
            for(var element in elementsList){
                $(elementsList[element]).
                    attr('unselectable','on')
                    .css('-webkit-user-select','none')
                    .on('selectstart',function(e){
                        e.preventDefault();
                        showDebugMessage('Element is NOT selectable', 'log');
                        return false;
                    }); 
            }
            
            return this;
        },
    //allow selection
        enableSelection: function(elementsList){
            if(!elementsList || !elementsList.length) elementsList = ['body'];
            
            for(var element in elementsList){
                $(elementsList[element]).
                    removeAttr('unselectable')
                    .css('-webkit-user-select','auto')
                    .on('selectstart',function(e){
                        e.stopPropagation();
                        showDebugMessage('Element is selectable', 'log');
                        return true;
                    }); 
            }
            
            return this;
        },
    //set target platform
        setPlatform: function(platformName){
            targetPlatform = platformName.toUpperCase();
            showDebugMessage('Target platform is ' + targetPlatform, 'log');
            
            return this;
        },
    //get target platform
        getPlatform: function(){
            return targetPlatform;
        },
    //slide name
        getSlideName: function(){
            var currentPath = window.location.pathname;

            if(currentPath.indexOf('/') !== -1){
                return currentPath.substr(currentPath.lastIndexOf('/') + 1).replace(/.html/ig, '');
            }else{
                return null;
            }
        },
    //next slide
        nextSlide: function(){
            if(this.getPlatform() == 'VEEVA'){
                document.location = 'veeva:nextSlide()';
            }else{
                showDebugMessage('nextSlide is available only for VEEVA', 'warn');
            }

            return this;
        },
    //previous slide
        prevSlide: function(){
            if(this.getPlatform() == 'VEEVA'){
                document.location = 'veeva:prevSlide()';
            }else{
                showDebugMessage('previousSlide is available only for VEEVA', 'warn');
            }

            return this;
        },
    //next Desktop slide
        nextDeskSlide: function(){
            var currentSlide = location.pathname.split('/').slice(-1)[0].slice(0,-5);
            var sliderLink = slideNames[jQuery.inArray( currentSlide, slideNames )+1];
            if(sliderLink != null){
                MainModule.openSlide(sliderLink+'.zip');
            }
            return this;
        },
    //next Desktop slide
        prevDeskSlide: function(){
            var currentSlide = location.pathname.split('/').slice(-1)[0].slice(0,-5);
            var sliderLink = slideNames[jQuery.inArray( currentSlide, slideNames )-1];
            if(sliderLink != null){
                MainModule.openSlide(sliderLink+'.zip');
            }
            return this;
        },
    //open slide
        openSlide: function(slideLink){
            if(slideLink && slideLink != ''){
                var fileExtension = (slideLink.lastIndexOf('.') !== -1) ?
                slideLink.substring(slideLink.lastIndexOf('.')) : '', fileName = (fileExtension !== '') ?
                slideLink.substring(0, slideLink.lastIndexOf('.')) : '', folderName = fileName;
                
                if(isMobile()){
                    if(targetPlatform === 'VEEVA'){
                        document.location = 'veeva:gotoSlide(' + fileName + '.zip)';
                    }else if(targetPlatform === 'ORACLE'){
                        document.location = 'melt://navigatetoitem:' + fileName + '.html';
                    }else{
                        showDebugMessage('Unknown platform "' + targetPlatform + '"', 'warn');
                    }
                }else{
                    if(fileExtension.toUpperCase() === '.ZIP' || fileExtension.toUpperCase() === '.HTML'){
                        document.location = '../' + folderName + '/' + fileName + '.html';
                    }else{
                        document.location = '../' + folderName + '/' + fileName + fileExtension;
                    }
                }
            }else{
                showDebugMessage('Slide cannot be opened (no slide specified)', 'warn');
            }

            return this;
        },
    //tracking
        setTracking: function(elements, keyMessageName){
            if(this.getPlatform() == 'VEEVA'){
                keyMessageName = keyMessageName || this.getSlideName();

                if(keyMessageName || elements){
                    if(elements.length > 0){
                        
                        var element = 0;

                        for(element = 0; element < elements.length; element++){
                            var elementClicked = $(elements[element].element);

                            elementClicked.attr({
                                'data-tagDescription': elements[element].tagDescription || 'UNDEFINED TAG DESCRIPTION',
                                'data-surveyQuestion': elements[element].surveyQuestion || 'UNDEFINED SURVEY QUESTION'
                            });
                            if(elementClicked.attr('data-slide')){
                                var dataSlide = elementClicked.attr('data-slide');
                                elementClicked.removeAttr('data-slide').attr('data-open', dataSlide);
                            }

                            elementClicked.bind('click' + (useTouchEvents === true ? ' touchstart' : ''), function(){
                                var $this = $(this);

                                if($this.attr('data-disableTracking') != 'true'){
                                    var tagDescription = $this.attr('data-tagDescription'),
                                    surveyQuestion = $this.attr('data-surveyQuestion') || tagDescription,
                                    trackingData = {
                                        Answer_vod__c       : keyMessageName,
                                        Survey_Type_vod__c  : tagDescription,
                                        Question_vod__c     : surveyQuestion,
                                        Text_Entered_vod__c : tagDescription
                                    }, dataSlide = $this.attr('data-open') || '', callBack = '';

                                    if(dataSlide != '') callBack = 'MainModule.openSlide("' + dataSlide + '")';

                                    showDebugMessage('Tracking: [' + ($this.attr('data-surveyQuestion') ||
                                    'UNDEFINED SURVEY QUESTION') + '] ' + tagDescription +
                                    (dataSlide != '' ? ' / Open slide: ' + dataSlide : ''), 'log');

                                    if(isMobile()){
                                        document.location = 'veeva:saveObject(Call_Clickstream_vod__c), value(' +
                                        JSON.stringify(trackingData).toString() + '), callback(' + String(callBack) + ')';
                                    }else{
                                        if(dataSlide != '') MainModule.openSlide(dataSlide);
                                    }
                                }else{
                                    showDebugMessage('Tracking is currently disabled for this element', 'warn');
                                }
                            });
                        }
                    }else{
                        showDebugMessage('Tracking will not work (no elements specified)', 'warn');
                    }
                }else{
                    showDebugMessage('Tracking will not work (check the parameters)', 'warn');
                }
            }else{
                showDebugMessage('Tracking is available only for VEEVA', 'warn');
            }

            return this;
        },
    //enable/disable support for touch events
        useTouchEvents: function(useOrNot){
            useTouchEvents = (useOrNot === false ? false : true);
            linksCustomTag();

            return this;
        },
    // get max Z-index
        getMaxIndex: function(){
            var maxIndex = 1;

            $("body *").each(function(){
                var elementIndex = parseInt($(this).css('z-index'));
                if (elementIndex > maxIndex) maxIndex = elementIndex;
            });

            return (maxIndex + 1);
        },
        //set flag for setting Height for headers. This flag is passed to avModal
        setHeadHeight: function(elemValid) {
            heightValidity = elemValid;
        },
        // get max ScrollSSI smartbalance index
        findMaxBalanceMessageIndex: function(elemCount){
            var count = $("#"+elemCount).children().length;
            return count - 1;
        },
        //get session values
        sessionCall: function(){
            isLocalStorage = sessionStorage.getItem('isLocalStorage');
            if (isLocalStorage == 'true') {
                storage = localStorage;
            }else{storage = sessionStorage};
            sessionKeyName = $('#hiddenSessionContainer').text();
            sessionNameValuer = parseInt(storage.getItem(sessionKeyName)); 
            if (sessionNameValuer == null) {
                sessionNameValuer = -1;
            }
        },
        // go to the next smartbalance breakpoint
        scrolltoBalance: function(balanceString)  { 
            // var nodes = document.getElementById(balanceString);
            // var nodes = balanceString;
            // var parentStringID = parentString;
            // // nodes.scrollIntoView(true);
            // // $('#'+parentString).scrollTo(nodes, 0);
            // var e = document.getElementById(elementId);
            // e.scrollIntoView(true);

            // var elementId = balanceString + parentString;
            var e = document.getElementById(balanceString);
            // e.scrollIntoView(true);
            e.parentNode.scrollTop = e.offsetTop;
        },
        changeSSIScrollBalance: function(elem){
            // alert('this works');
            MainModule.sessionCall();
            // sessionNameValuer = (parseInt(sessionNameValuer) || -1);
            var numberIncrease = sessionNameValuer + 1;

            // find max index number
            var scrollId = elem; //pass smartBalance ID
            var maxBalNum = MainModule.findMaxBalanceMessageIndex(scrollId);

            //Check if max balance number is greater than last ID
            maxBalNum = (numberIncrease > maxBalNum) ? 0 : numberIncrease;
            // var balanceString = $('#'+scrollId+' #bal'+maxBalNum)[0];
            var balanceString = 'bal'+maxBalNum;

            //Scroll to the next ID
            MainModule.scrolltoBalance(balanceString);
            //Get the last paragraph index
            //********Uncomment if need to check the last paragraph**********
            // var nextBalNum = MainModule.messageIndexNum(scrollId); 
            //maxBalNum = nextBalNum;
            //********Uncomment if need to check the last paragraph**********
            //Store the new value in session
            storage.setItem(sessionKeyName, maxBalNum);
        },
        touchSwiper: function(disableDirection){
            if ((!iOS || swipeOff) && (disableDirection)) {
                $("#contentWrapper").swipe( {
                    //Generic swipe handler for all directions
                    swipe:function(event, direction, distance, duration, fingerCount, fingerData) {
                      // alert('you swiped' + direction);
                      var direction = direction;
                      MainModule.loadNextDynamicSlide(direction, disableDirection);
                    }
                });
            };
        },
        loadNextDynamicSlide: function(elemDirect, disableDirection){
            if (elemDirect == 'right' && (disableDirection != 'swipeLeftOff')) {
                MainModule.prevDeskSlide();
            }else if(elemDirect == 'left' && (disableDirection != 'swipeRightOff')){
                MainModule.nextDeskSlide();
            }
        }
    }

})(window).init(true);